import { useContext, useState, useEffect } from 'react';
import { Formik, Form } from 'formik';
import { useRouter } from 'next/router';
import { getCurrentUser } from '../../auth/Auth';
import {
  auth,
  googleProvider,
  facebookProvider,
  signInWithPopup,
} from '../../config/firebase';
import FormikField from '../forms/FormikField';
import AuthContext from '../../context/AuthContext';
import Head from 'next/head';
import axios from 'axios';
import links from '../../config/links';
import toast from 'react-hot-toast';

interface LoginComponentProps {}

const LoginComponent: React.FC<LoginComponentProps> = () => {
  const { setUser } = useContext(AuthContext);
  const [loading, setLoading] = useState(true);
  const [userLocal, setUserLocal] = useState<any>('');
  const [errors, setErrors] = useState<any>({});
  const [showPassword, setShowPassowrd] = useState<boolean>(false);
  const router = useRouter();

  useEffect(() => {
    setUserLocal(getCurrentUser());
    if (userLocal) router.push('/');
  }, []);
  const initialValues = {
    email: '',
    password: '',
  };

  const handleSubmit = async (values: any) => {
    await axios
      .post(`${links.default}/auth`, {
        email: values.email.trim(),
        password: values.password,
      })
      .then((res) => {
        localStorage.setItem('FBIdToken', `Bearer ${res.data.token}`);
        setUser(getCurrentUser() || null);
        router.push('/');
      })
      .catch((error) => {
        console.log(error.response.data.message || '');
        toast.error(error.response.data.message || '');
        // if (error.response.data.path[0] === 'general')
        //   toast.error(error.response.data.message);

        // setErrors(error.response.data);
      });
  };
  const signInWithGoogle = () => {
    signInWithPopup(auth, googleProvider)
      .then(async (res: any) => {
        const { accessToken } = res.user;
        const { displayName, email, photoURL, uid } = res.user;
        const newUser = {
          name: displayName,
          email,
          password: '',
          userId: uid,
          imgUrl: photoURL,
          number: '0999',
        };
        await axios
          .post(`${links.default}/user/google`, newUser)
          .then((res) => {
            console.log(res.data);
            localStorage.setItem('FBIdToken', `Bearer ${accessToken}`);
            setLoading(false);
            router.replace('/');
          })
          .catch((error) => console.log(error?.response?.data?.message || ''));
      })
      .catch((error) => console.log(error?.response?.data?.message || ''));
  };
  const signInWithFacebook = () => {
    signInWithPopup(auth, facebookProvider)
      .then(async (res: any) => {
        const { accessToken } = res.user;
        const { displayName, email, photoURL, uid } = res.user;
        const newUser = {
          name: displayName,
          email,
          password: '',
          userId: uid,
          imgUrl: photoURL,
          number: '0999',
        };
        await axios
          .post(`${links.default}/user/facebook`, newUser)
          .then((res) => {
            console.log(res.data);
            localStorage.setItem('FBIdToken', `Bearer ${accessToken}`);
            setLoading(false);
            router.replace('/');
          })
          .catch((error) => console.log(error?.response?.data?.message || ''));
      })
      .catch((error) => console.log(error?.response?.data?.message || ''));
  };

  const handleShowPassword = () => setShowPassowrd(showPassword ? false : true);
  return (
    <>
      {!userLocal ? (
        <>
          <div>
            <Head>
              <title>Login</title>
              <meta name="description" content="Generated by create next app" />
              <link rel="icon" href="/favicon.ico" />
            </Head>

            <main>
              <div className=" flex justify-center items-center relative">
                {/* container */}
                <div className="h-screen w-[375px] font-roboto px-5">
                  <div className="pt-5 xs:pt-12 md:pt-13 w-[90%] m-0">
                    <img
                      className="object-cover object-center w-[15rem] h-w-[15rem] fixed transform -z-50 translate-x-[14rem] -translate-y-16 top-0"
                      src="/welcome_page/salad_plate.png"
                      alt="salad"
                    />
                    <img
                      className="object-cover object-center w-[15rem] h-w-[15rem] fixed transform -z-50 -translate-x-[4rem] translate-y-16 left-0 bottom-0"
                      src="/welcome_page/salad_plate_2.png"
                      alt="salad"
                    />
                    <h1 className=" text-2xl sm:text-3xl font-bold text-[#3d1c47]">
                      Login to your <br /> account
                    </h1>
                    {/* <img
                      className="object-cover object-center h-20 w-25 fixed left-10 top-0"
                      src="/logo_svg/nicas_logo.png"
                      alt=""
                    /> */}
                    <img
                      className="mt-8 h-[8rem] mx-auto object-cover object-center"
                      src="/logo_svg/logo_min_grean_alt.png"
                      alt="logo"
                    />
                  </div>
                  {/* form */}
                  <Formik onSubmit={handleSubmit} initialValues={initialValues}>
                    <Form>
                      {/* form container */}
                      <div className="pt-4 pb-3">
                        <FormikField
                          name="email"
                          className="focus:outline-none text-sm"
                          placeholder="email@email.com"
                          // error={`${errors.path[0] === 'email' ? errors.message : ''}`}
                        />
                        <FormikField
                          name="password"
                          className="focus:outline-none text-sm"
                          placeholder="password"
                          type="password"
                          showPassword={showPassword}
                          onShowPassword={handleShowPassword}
                          // error={`${errors.path[0] === 'email' ? errors.message : ''}`}
                        />
                      </div>
                      <button
                        type="submit"
                        className="text-center w-full bg-[#00ddc6] text-[#00554c] py-3 rounded-full font-bold"
                      >
                        Log in
                      </button>
                      <hr className="border-gray-300 my-4 mx-auto" />
                      <button
                        type="button"
                        onClick={signInWithGoogle}
                        className="my-2 flex text-center justify-center border border-gray-400 items-center w-full py-2 text-black rounded-md mt-3"
                      >
                        <img
                          className="h-5"
                          src="/logo_svg/google-icon.svg"
                          alt=""
                        />
                        <span className="pl-3">Continue with Google</span>
                      </button>
                      <button
                        type="button"
                        onClick={signInWithFacebook}
                        className="flex text-center justify-center items-center w-full py-2 text-white bg-[#039ae5] rounded-md mt-3"
                      >
                        <img
                          className="h-6 mb-1"
                          src="/logo_svg/facebook-icon.svg"
                          alt=""
                        />
                        <span className="pl-3">Continue with Facebook</span>
                      </button>
                    </Form>
                  </Formik>
                </div>
              </div>
            </main>
          </div>
        </>
      ) : null}
    </>
  );
};

export default LoginComponent;
